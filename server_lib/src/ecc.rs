use napi::bindgen_prelude::*;
use napi_derive::napi;

#[napi]
pub fn ecc_encrypt(pk: Buffer, msg: Buffer) -> Buffer {
  let encrypted = ecies::encrypt(&pk, &msg).unwrap();

  encrypted.into()
}

#[napi]
pub fn ecc_decrypt(sk: Buffer, encrypted: Buffer) -> Buffer {
  let decrypted = ecies::decrypt(&sk, &encrypted).unwrap();

  decrypted.into()
}

#[test]
fn it_works() {
  let sk: [u8; 32] = [
    0xb1, 0xd7, 0x92, 0xdd, 0x4a, 0x00, 0xec, 0xf6, 0x9a, 0x5a, 0x1f, 0x8f, 0x8b, 0x63, 0x81, 0x35,
    0x23, 0x2b, 0x06, 0x19, 0xe2, 0xe6, 0xe9, 0xba, 0x32, 0x39, 0xf3, 0xae, 0xa5, 0x2a, 0x90, 0xd0,
  ];
  let encrypted: [u8; 129] = [
    0x04, 0x46, 0x5e, 0xe6, 0x34, 0x46, 0x02, 0x0f, 0x36, 0x4f, 0x8e, 0xac, 0x55, 0x91, 0xf7, 0xd6,
    0x5c, 0x71, 0x27, 0x4f, 0xfb, 0x61, 0xf8, 0x97, 0x85, 0xc6, 0x86, 0x1a, 0xf3, 0x98, 0x49, 0xeb,
    0xea, 0x74, 0x68, 0xed, 0xfd, 0x49, 0xed, 0xf6, 0x9f, 0x4e, 0x51, 0x52, 0xd5, 0x0f, 0x33, 0x1a,
    0xd5, 0x68, 0xce, 0xec, 0x3a, 0xb9, 0x62, 0x07, 0x1a, 0xd2, 0x4f, 0xce, 0x74, 0x88, 0x54, 0xe7,
    0xe1, 0xf3, 0xa2, 0x16, 0xf0, 0x6d, 0x86, 0xd1, 0xc6, 0x53, 0x56, 0x1f, 0x75, 0x35, 0xb0, 0xc2,
    0x43, 0xa4, 0xda, 0x2b, 0x41, 0x7e, 0x4c, 0x91, 0xb6, 0x8f, 0x2d, 0x16, 0x67, 0x79, 0x6f, 0xf8,
    0x64, 0x11, 0x19, 0xff, 0x70, 0xac, 0xee, 0xa8, 0x5b, 0x68, 0xfa, 0x03, 0x79, 0x12, 0xe9, 0x95,
    0xb9, 0x0b, 0xa0, 0x47, 0x6f, 0x69, 0xe2, 0x38, 0xcd, 0x4c, 0xaa, 0x03, 0xa7, 0xdd, 0x39, 0x83,
    0x11,
  ];

  let result = ecies::decrypt(&sk, &encrypted).unwrap();

  println!("{:?}", result)
}
